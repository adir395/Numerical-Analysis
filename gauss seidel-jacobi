

def GaussSeidel(matrix,b,diagonal):
    count=0
    counter=0
    size = len(matrix)
    tolerableError = 0.00001
    tolerableErrorCounter = 0
    variables = []
    nextVariables = []
    e = []
    for i in range(size):
        variables.append(0)
        e.append(0)
        nextVariables.append(0)

    while (tolerableErrorCounter == 0 )or (diagonal==False and counter<100):
        for i in range(size):
            nextVariables[i] = b[i]
            for j in range(size):
                if i != j:
                    nextVariables[i] -= (matrix[i][j] * variables[j])
            nextVariables[i] /= matrix[i][i]
            e[i] = abs(nextVariables[i] - variables[i])
            variables[i]=nextVariables[i]
        for i in range(size):
            print(nextVariables[i], end=" ")
        print("")

        for i in range(size):
            variables[i] = nextVariables[i]
        if diagonal==True:
            for i in range(size):
                if e[i] < tolerableError:
                    tolerableErrorCounter += 1
            count+=1
        else:
            counter+=1
    print(f"After a total of {count} iterations the result is:")
    for i in range(size):
        print(f"x{i+1}:", nextVariables[i], " ", end=" ")


def Jacobi(matrix,b,diagonal):
    count = 0
    counter = 0
    size = len(matrix)
    tolerableError = 0.00001
    tolerableErrorCounter = 0
    variables=[]
    nextVariables=[]
    e=[]
    for i in range(size):
        variables.append(0)
        e.append(0)
        nextVariables.append(0)

    while (tolerableErrorCounter == 0 )or (diagonal==False and counter<100):
        for i in range(size):
            nextVariables[i]=b[i]
            for j in range(size):
                if i!=j:
                    nextVariables[i] -= (matrix[i][j]*variables[j])
            nextVariables[i]/=matrix[i][i]
            e[i] = abs(nextVariables[i] - variables[i])
        for i in range(size):
            print(nextVariables[i],end=" ")
        print("")

        for i in range(size):
            variables[i]=nextVariables[i]

        if diagonal == True:
            for i in range(size):
                if e[i] < tolerableError:
                    tolerableErrorCounter += 1
            count += 1
        else:
            counter += 1
    print(f"After a total of {count} iterations the result is:")
    for i in range(size):
        print(f"x{i + 1}:", nextVariables[i], " ", end=" ")

def createDominantDiagonal(matrix):
    size=len(matrix)
    notDominant=-1
    for i in range(size):
        sum=0
        for j in range(size):
            if i != j:
                sum = sum + abs(matrix[i][j])
        if abs(matrix[i][i]) < sum:
            notDominant=i
            for n in range(i+1,size):
                sum = 0
                for k in range(size):
                    if notDominant != k:
                        sum = sum + abs(matrix[n][k])
                if abs(matrix[n][notDominant]) >=sum :
                    temp = matrix[notDominant]
                    matrix[notDominant] = matrix[n]
                    matrix[n] = temp
    print(matrix)
    return matrix


# Function to return the minimum steps
# required to convert the given matrix
# to a Diagonally Dominant Matrix
def findStepsForDDM(matrix):
    size=len(matrix)
    result = 0
    # For each row
    for i in range(size):
        # To store the sum of the current row
        sum = 0
        for j in range(size):
            sum += abs(matrix[i][j])
        # Remove the element of the current row
        # which lies on the main diagonal
        sum -= abs(matrix[i][i])
        # Checking if the diagonal element is less
        # than the sum of non-diagonal element
        # then add their difference to the result
        if (abs(matrix[i][i]) < abs(sum)):
            result += abs(abs(matrix[i][i]) - abs(sum))
    return result


def dominantDiagonal(matrix):
    if findStepsForDDM(matrix)==0:
        return True
    if findStepsForDDM(matrix) != 0:
        newMatrix=createDominantDiagonal(matrix)
        if findStepsForDDM(newMatrix) == 0:
            return True
        else:
            print("There is no dominant diagonal for this matrix")
        # try 100 times anyway
            return False





"""matrix = [[7, 5, 1,1],
       [5, 2, 11,2],
       [3, 5, 4,12],
       [1,10,2,3]]

dominantDiagonal(matrix)"""
matrix = [[20,1,-2],[3,20,-1],[2,-3,20]]
b = [17, -18, 25]
while True:
    print("how would you like to solve this matrix? ")
    print("1- Jacobi")
    print("2- Gauss-Seidel")
    val = input("please press 1 or 2 : ")
    if val=='1':
        if dominantDiagonal(matrix)==True:
            Jacobi(matrix,b,True)
        else:
            Jacobi(matrix, b, False)
        break
    elif val=='2':
        if dominantDiagonal(matrix)==True:
            GaussSeidel(matrix,b,True)
        else:
            GaussSeidel(matrix,b,False)

        break
    else:
        print("Wrong number, please try again. ")



