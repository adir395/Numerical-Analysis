import math
import sympy as sp
from sympy.utilities.lambdify import lambdify

def trapezoidalMethod(a,b,f,n):
    """
    calculates the area of the given function by the trapezoidal method

    :param a: first index range
    :param b: last index range
    :param f: the function
    :param n: number of sections
    :return: the area of the function
    """
    h = (b - a) / n
    result=0
    aIndex=a
    bIndex=a+h
    f = lambdify(x, f)
    while (bIndex <= b):
        result+=0.5*(bIndex-aIndex)*(f(aIndex)+f(bIndex))
        aIndex+=h
        bIndex+=h
    print(f"The area of the function by the trapezoidal method is: {result}")

import math
import sympy as sp
from sympy.utilities.lambdify import lambdify

def calch(b,a,n):
    """

    :param b: Integral number
    :param a: Integral number
    :param n: how many parts
    :return: the height
    """
    h= ((b-a))/n
    return h

def xarray(a,h,n):
    """

    :param a: Integral number
    :param h: the height
    :param n: how many parts
    :return: x array
    """
    xarr=[]
    xarr.append(a)
    for i in range(a+1,n+1):
        xarr.append(xarr[i-1]+h)
    return xarr

def yarray(axarr,n,func):
    """

    :param axarr: x array
    :param n: how mant parts
    :param func: the function
    :return: y array
    """
    yarr=[]
    fd=lambdify(x,func)
    for i in range(0,n+1):
        yarr.append(fd(float(axarr[i])))
    return yarr


def simpsonMethod(a,b,n,func):
    """

    :param yarr: y array
    :param h: the height
    :return: the result of simpsonMethod
    """
    h=calch(b,a,n)
    yarr=yarray(xarray(a,h,n),n,func)
    num=yarr[0]
    for i in range(1,len(yarr)):
        if(i%2==0):
            num=num+2*yarr[i]
        else:
            num=num+4*yarr[i]
    num=num+yarr[len(yarr)-1]
    num=(1/3)*h*num
    return num



x=sp.symbols('x')
f=sp.sin(x)
a=0
b=math.pi
n=4
print(simpsonMethod(a,b,n,f))
trapezoidalMethod(a,b,f,n)






