# Gauss Seidel Iteration

# Defining equations to be solved
# in diagonally dominant form

def GaussSeidel(matA,b):
    size=len(matA)


    print(matA[0][1])
    f1 = lambda x, y, z: (b[0] - matA[0][1]*y - matA[0][2] * z) / matA[0][0]
    f2 = lambda x, y, z: (b[1] - matA[1][0] * x -matA[1][2]* z) / matA[1][1]
    f3 = lambda x, y, z: (b[2] - matA[2][0] * x - matA[2][1] * y) / matA[2][2]

    # Initial setup
    x0 = 0
    y0 = 0
    z0 = 0
    count = 1

    # Reading tolerable error
    e = 0.00001

    # Implementation of Gauss Seidel Iteration
    print('\nCount\tx\ty\tz\n')

    condition = True

    while condition:
        x1 = f1(x0, y0, z0)
        y1 = f2(x1, y0, z0)
        z1 = f3(x1, y1, z0)
        print('%d\t%0.4f\t%0.4f\t%0.4f\n' % (count, x1, y1, z1))
        e1 = abs(x0 - x1);
        e2 = abs(y0 - y1);
        e3 = abs(z0 - z1);

        count += 1
        x0 = x1
        y0 = y1
        z0 = z1

        condition = e1 > e and e2 > e and e3 > e

    print('\nSolution: x=%0.3f, y=%0.3f and z = %0.3f\n' % (x1, y1, z1))



def Jacobi(matA,b):
    # Defining equations to be solved
    # in diagonally dominant form
    f1 = lambda x, y, z: (b[0] - matA[0][1] * y - matA[0][2] * z) / matA[0][0]
    f2 = lambda x, y, z: (b[1] - matA[1][0] * x - matA[1][2] * z) / matA[1][1]
    f3 = lambda x, y, z: (b[2] - matA[2][0] * x - matA[2][1] * y) / matA[2][2]

    # Initial setup
    x0 = 0
    y0 = 0
    z0 = 0
    count = 1

    # Reading tolerable error
    e = 0.00001

    # Implementation of Jacobi Iteration
    print('\nCount\tx\ty\tz\n')

    condition = True

    while condition:
        x1 = f1(x0, y0, z0)
        y1 = f2(x0, y0, z0)
        z1 = f3(x0, y0, z0)
        print('%d\t%0.4f\t%0.4f\t%0.4f\n' % (count, x1, y1, z1))
        e1 = abs(x0 - x1);
        e2 = abs(y0 - y1);
        e3 = abs(z0 - z1);

        count += 1
        x0 = x1
        y0 = y1
        z0 = z1

        condition = e1 > e and e2 > e and e3 > e

    print('\nSolution: x=%0.3f, y=%0.3f and z = %0.3f\n' % (x1, y1, z1))


matrixA = [[20,1,-2],[3,20,-1],[2,-3,20]]
vectorb = [17, -18, 25]
#GaussSeidel(matrixA,vectorb)
Jacobi(matrixA,vectorb)
